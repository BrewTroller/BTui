//
//
//   BTUI -- A JavaScript/HTML5 User Interface For the BrewTroller Project
//   				www.BrewTroller.com
//

NOTE: This is the feature update that will be made to this app, as it will be transitioning to a full handwritten HTML5/JS/CSS3 application. This is because it has become very difficult to use ExtJS to generate the markup using its predefined classes. It seems that events fire at different points in different browsers, making it very difficult to capture the events we need to finish setting up the interface and Custom JS classes that handle BrewTroller functionality. ExtJS will still provide the charting and store plugins for Vessel displays. However, in its current state, this app is functional for monitoring, with simple option changing (Temperature Set Points).


App is in ALPHA Stage!

You must set the IP of the BTNic module in the settings window

The BTUI.tmproj file is a project file for the TextMate text editor for Mac,
which I believe is also compatible with the 'E' editor for Windows

Known Issues: 
	
	Changing the minimum value in Vessel config window causes the gauge needle to respond to the new minimum, but the original axis labels remain. Changing the maximum works as expected.


Currently Implemented:
	
	Vessel Volume and Temperature retrieval from BrewTroller
	Vessel Temperature Set point Setting
	Manual Vessel Updates
	Auto Updates with configurable interval
	BrewTroller Auto Updates (Currently just valve profile status)
	
To DO For Initial Release (In order of Priority):

	Implement full settings from BrewTroller Menus
	Fully comment and Document Code...
	Add CSS code to build a theme, and make the appearance pretty :) (this includes skinning the temperature and volume charts) / Resolution independent scaling 
	


To DOs for Long Term (In order of Priority):
	
	Support for Chill Step / Support for AUX temperature Sensors
	Persistent settings - Import / Export Settings for portability, Save in LocalStorage DB (Does not transfer browser to browser, prone to
loss (cookie clean-up/browsing data delete)) Another option would be to store the settings on an SD card on the BTNic board
	Vessel Customizations - Support for Steam, BIAB, Non-Standard Two Vessel, etc.
	Recipes - Import / Export in BeerXML format
	
	

	
Latest Changes:
	
	Removed UGLY navPanel buttons (Ext.Button) in favour of pure CSS buttons, as a result:
				Card changing functionality is now defined in the success callback in the navPanel loader
				Settings functionality has also been moved from the Views controller to the BrewTroller Class
	Added Update BT button, which updates only BT parameters (valve profile statuses, program statuses, etc)
	Added Update All button, which updates the above states BT parameters as well as the calling the manualUpdate() method for each Vessel
	Added Vessels object array to BrewTroller Class, when BrewTroller.InitSetup() is called it is filled with references to the Vessel class instances
	Added display object to Vessel Class instances, which is a reference to its corresponding display panel, to make calls between the two easier and quicker by avoiding the use of Ext.ComponentQuery.query()d

	


WishList for BTNic Architecture:

	Way to retrieve Vessel Compile Options. EX: HLT as KET, RIMS, etc
	Target Volume Retrieval
	WebSockets capable Server ( would decrease loads on network, as BT could "push" new data to the connected clients )(maybe hard to implement, would only be beneficial for WebKit browsers and FireFox)


App is based on the ExtJS 4 library, available at http://sencha.com
	
Currently All communication with the BrewTroller is done using JavaScript and XHR GET requests instead of using the Flash based transfers in the YUI library (Matt's initial Demo used it). This provided maximum compatibility with devices, but because JavaScript is Single threaded it can quickly slow down or crash the browser if the Auto Update frequency is set too high. The next version of the BTNic module firmware providing batch commands will help this problem considerably. **Asynchronous XHR has also helped considerably, although it still seems 	
																possible to overload the Embedded Module, to the point it stops responding**

Credits:

	Credit where credit is due, the very elegant navigation bar (a la Apple.com) is based heavily on the work done here: http://www.marcofolio.net/css/the_apple.com_navigation_menu_created_using_only_css3.html (still need to request permission for use!!)


Documentation:

	BrewTroller.Communicate():
		Base communication method for getting and sending data to BrewTroller. All communication is done Asynchronously, so all response
		handling needs to be done in the callback function.
		
		Method REQUIRES the following arguments:
			Command Address: Must be full address EX: http://10.0.1.21/btnic.cgi?q0
			Callback function: function to be called when a response is returned from the BrewTrolller
			Arguments:			Any arguments that need to be passed to the callback function
			
		Example Usage:
		
		var callbackFunction = function(args, xhr){	//FUNCTION MUST HAVE XHR ARGUMENT PASSED TO IT
			var response = JSON.parse(xhr.responseText);	//parses the response into JSON array
			//DO SOMETHING WITH RESPONSE HERE
		};
		
		BrewTroller.Communicate('http://10.0.1.21/btnic.cgi?q0', callbackFunction, args); //args will generally be the vesselIndex of the
																						  //calling vessel