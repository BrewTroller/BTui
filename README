//
//
//   BTUI -- A JavaScript/HTML5 User Interface For the BrewTroller Project
//   				www.BrewTroller.com
//


App is in ALPHA Stage!

Info: 
	This app must be run in a RECENT browser, like Chrome 16+, Safari 5+, Firefox 7, Mobile Safari on iOS 5+, Android 3+ (device dependant), IE is entirely untested, but could easily be supported with ChromeFrame. This is due to the use of recent additions to HTML5 and CSS3, including XHR Level 2, and SVG. Although the app will render in a mobile device browser at this time none of the functionality will work as the 'tap' events do not have listeners attached.
	


Latest Changes (most recent first):

	Completed BrewTroller Settings dialog port from ExtJS app, need to port BrewTroller Class to add back functionality
	Added skeleton for BrewTroller Settings window, and show and hide functionality
	Switched to new app build with no ExtJS(yet?). Built by hand using HTML5/CSS3/JS
	Currently has no JS implementation, so no functionality just an interface.

	
To DO For Initial Release (In order of Priority):

	Build new BT settings window
	Re-implement app functionality
	Build new valve panel
	Re-implement valve functionality
	Implement full settings from BrewTroller Menus
	Fully comment and Document Code...	


To DOs for Long Term (In order of Priority):
	
	Support for Chill Step / Support for AUX temperature Sensors
	Persistent settings - Import / Export Settings for portability, Save in LocalStorage DB (Does not transfer browser to browser, prone to
loss (cookie clean-up/browsing data delete)) Another option would be to store the settings on an SD card on the BTNic board
	Vessel Customizations - Support for Steam, BIAB, Non-Standard Two Vessel, etc.
	Recipes - Import / Export in BeerXML format	


WishList for BTNic Architecture:

	Way to retrieve Vessel Compile Options. EX: HLT as KET, RIMS, etc
	Target Volume Retrieval
	Unit retrieval Metric / Imperial
	WebSockets capable Server ( would decrease loads on network, as BT could "push" new data to the connected clients )(maybe hard to implement, would only be beneficial for WebKit browsers and FireFox)


Credits:

	Credit where credit is due, the very elegant navigation bar (a la Apple.com) is based heavily on the work done here: http://www.marcofolio.net/css/the_apple.com_navigation_menu_created_using_only_css3.html (still need to request permission for use!!)


Documentation:

	BrewTroller.Communicate():
		Base communication method for getting and sending data to BrewTroller. All communication is done Asynchronously, so all response
		handling needs to be done in the callback function.
		
		Method REQUIRES the following arguments:
			Command Address: Must be full address EX: http://10.0.1.21/btnic.cgi?q0
			Callback function: function to be called when a response is returned from the BrewTrolller
			Arguments:			Any arguments that need to be passed to the callback function
			
		Example Usage:
		
		var callbackFunction = function(args, xhr){	//FUNCTION MUST HAVE XHR ARGUMENT PASSED TO IT
			var response = JSON.parse(xhr.responseText);	//parses the response into JSON array
			//DO SOMETHING WITH RESPONSE HERE
		};
		
		BrewTroller.Communicate('http://10.0.1.21/btnic.cgi?q0', callbackFunction, args); //args will generally be the vesselIndex of the
																						  //calling vessel